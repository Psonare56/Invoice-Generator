pipeline {
    agent any

    environment {
        // Define environment variables
        SONAR_HOME = tool name: "SonarQubeInvoice"

    }
    
    options {
        timeout(time: 1, unit: 'MINUTES') // Setting a timeout for the entire pipeline
    }


    stages {
        stage("Start") {
            steps {
                echo "Start pipeline"
            }
        }

        stage("Checkout Code from Github") {
            steps {
                git url: "https://github.com/Psonare56/Invoice-Generator.git", branch: "Devops"
            }
        }
        
        stage("SonarQube Quality Analysis") {
            steps {
                script {
                    // Run SonarQube analysis
                    withSonarQubeEnv('SonarQubeInvoice') {
                        sh "${SONAR_HOME}/bin/sonar-scanner -Dsonar.projectName=Invoice-Generator -Dsonar.projectKey=Invoice-Generator"
                    }
                }
            }
        }
        
        stage('Sonar Quality Gate Scan') {
            steps {
                script {
                    timeout(time: 1, unit: 'MINUTES') {
                        // Wait for SonarQube quality gate
                        waitForQualityGate abortPipeline: false
                    }
                }
            }
        }
        
        stage("Trivy File system Scan ") {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        
        stage('Deploy using Docker Compose') {
            steps {
                script {
                    // Stop and start Docker containers using Docker Compose
                    dir("/var/lib/jenkins/workspace/invoice-generator-CICD-pipeline/Invoicing") {
                        sh 'ls -a'
                        sh 'chmod +x *'
                        sh 'docker-compose down --volumes --remove-orphans --rmi all'
                        sh 'docker-compose up --build -d web'
                        sh 'docker images'
                        sh 'docker ps'
                    }
                }
            }
        }
        
        stage("End of code") {
            steps {
                echo "End of code"
            }
        }
    }
}