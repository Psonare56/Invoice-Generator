pipeline {
    agent any

    environment {
        // Define environment variables
        SONAR_HOME = tool name: "SonarQubeInvoice"

    }
    
    // options {
    //     timeout(time: 300, unit: 'MINUTES') // Setting a timeout for the entire pipeline
    // }


    stages {
        stage("Start") {
            steps {
                echo "Start pipeline"
            }
        }

        stage("Checkout Code from Github") {
            steps {
                git url: "https://github.com/Psonare56/Invoice-Generator.git", branch: "Devops"
            }
        }
        
        stage('SonarQube Quality Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQubeInvoice') {
                        sh "rm -rf .scannerwork"
                        sh "${env.SONAR_HOME}/bin/sonar-scanner -Dsonar.projectName=Invoice-Generator -Dsonar.projectKey=Invoice-Generator -Dsonar.sources=."
                    }
                }
            }
        }
        
        stage("OWASP Dependency Check") {
            steps {
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'OWASPdcInvoice'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage('Sonar Quality Gate Scan') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        def qualityGate = waitForQualityGate()
                        
                        if (qualityGate.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
                        }
                    }
                }
            }
        }

        stage('Trivy File System Scan') {
            steps {
                script {
                    // Ensure Trivy scans the specified project directory
                    dir('/var/lib/jenkins/workspace/invoice-generator-CICD-pipeline/Invoicing') {
                        sh 'trivy fs --format table -o trivy-fs-report.html .'
                    }
                }
            }
        }
        
        stage('Deploy using Docker Compose') {
            steps {
                script {
                    // Stop and start Docker containers using Docker Compose
                    dir("/var/lib/jenkins/workspace/invoice-generator-CICD-pipeline/Invoicing") {
                        sh 'ls -a'
                        sh 'chmod +x *.sh'
                        // Run Docker Compose up command
                        sh './application-automatic-docker-compose-up.sh'
                    }
                }
            }
        }
        
        stage("End of code") {
            steps {
                echo "End of code"
            }
        }
    }
}